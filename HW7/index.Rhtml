<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    TeX: {
      extensions: ["mhchem.js"]
    }
  });
</script>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<h3>Homework 6</h3>
<i>By: Jordan Poles</i>
<p>Herein, we will be working with a Poisson process with \(\lambda = .1\) events/sec, which runs for T=100 sec.</p>

<h4>Question 1:</h4>
<p>First we determine the expected number of events in the given time interval.</p>

\[
\lt n(T) > = e^{-\lambda T}\sum_{N=0}^{\infty} \frac{(\lambda T )^N}{(N-1)!}
= e^{-\lambda T}\sum_{N=1}^{\infty} \frac{(\lambda T )^N}{(N-1)!}
\\
= e^{-\lambda T} \lambda T \sum_{N=1}^{\infty} \frac{(\lambda T )^{N-1}}{(N-1)!}
= e^{-\lambda T} \lambda T \sum_{M=0}^{\infty} \frac{(\lambda T )^M}{(M)!} = \lambda T
\\
\therefore\quad \lt n(100)> = .1*100 = \bf{10}
\]

<h4>Question 2:</h4>
<p>We then find the CV of the expected number of events in this interval.</p>

\[
CV[n(T)] = \frac{SD[n(T)]}{\lambda T} = \frac{\sqrt{\lambda}}{\lambda T} = \frac{\sqrt{.1}}{10} \approx .0316
\]

<h4>Question 3:</h4>
<p>We now simulate the above process using the R programming language.</p>

<!--begin.rcode
lambda=.1;
T=100;
N=10000;
t=T/N;
cum_data = cumsum(rpois(N, lambda*t));
plot(cum_data,type="l")
end.rcode-->

<h4>Question 4:</h4>
<p>We now repeat this simulation many times in order to estimate the mean and CV.</p>
<!--begin.rcode
rep_data = sapply(seq(0, 1000), function(x){sum(rpois(N, lambda*t))})
paste0("Mean: ", mean(rep_data))
paste0("CV: ", sd(rep_data)/mean(rep_data))
end.rcode-->

<h4>Question 5</h4>
<!--begin.rcode
plot(density(rep_data), main = "Simulated vs Actual Distribution (green)")
lines(dpois(seq(1, 25), lambda*T), col="green")
end.rcode-->
